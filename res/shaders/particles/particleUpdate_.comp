#version 430 core

#extension GL_ARB_compute_shader : enable
// #extension GL_ARB_shader_storage_buffer_object : enable
#include "../util.glsl"
#include "particle.glsl"
#include "../transform.glsl"


layout(std430,binding = 0) buffer t{_transform transforms[];};//
layout(std430,binding = 1) buffer ac{int atomicCounters[];};//
layout(std430,binding = 2) buffer p{particle particles[];};//
layout(std430,binding = 3) buffer ep{emitter_prototype prototypes[];}; //
layout(std430,binding = 4) buffer e{emitter emitters[];};//
layout(std430,binding = 6) buffer de{uint dead[];};//
layout(std430,binding = 7) buffer pl{uint particleLifes[];};
layout(std430,binding = 10) buffer lp{uint livingParticles[];};//

const uint liveParticles = 0;
const uint burstCounter = 1;
const uint emittedCounter = 2;

uniform uint offset;
uniform uint count;
uniform uint burstOffset;
uniform float deltaTime;
uniform float time;
uniform int max_particles;
uniform uint stage;
uniform vec3 floatingOrigin;

// void setParticleDead(uint x){
//     atomicAnd(particleLifes[x / 32], ~(1 << (x % 32)));
// }


void update(uint index, float dt){

    uint id = livingParticles[index];
    particle p = particles[id];
    emitter_prototype proto = prototypes[p.emitter_prototype];
    p.position += get(p.velocity) * dt;
    p.position -= floatingOrigin;
    p.life -= dt / p.l;
    if(p.life <= 0.f)
    {
        int _index = atomicAdd(atomicCounters[liveParticles],-1);
        dead[_index - 1] = id;
        particleLifes[id] = 0;
        p.next = -1;
    }

    particles[id] = p;
}

void countParticles(uint thread_id){
    if(particleLifes[thread_id] == 1){
        int index = atomicAdd(atomicCounters[2],1);
        livingParticles[index] = thread_id;
    }
}


layout( local_size_x = 256,  local_size_y = 1, local_size_z = 1) in;
void main () {
    uint gid = gl_GlobalInvocationID.x;
    if(gid < count){
        switch(stage){
            case 4:
                atomicMin(atomicCounters[liveParticles],max_particles);
                break;
            case 5:
                atomicCounters[2] = 0;
                break;
            case 6:
                countParticles(gid);
                break;
            case 7:
                update(gid,deltaTime);
                break;

        }
    }
}