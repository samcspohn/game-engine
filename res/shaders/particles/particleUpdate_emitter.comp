#version 430 core

#extension GL_ARB_compute_shader : enable
// #extension GL_ARB_shader_storage_buffer_object : enable
#include "../util.glsl"
#include "particle.glsl"
#include "../transform.glsl"


layout(std430,binding = 0) buffer t{_transform transforms[];};//
layout(std430,binding = 1) buffer ac{int atomicCounters[];};//
layout(std430,binding = 2) buffer p{particle particles[];};//
layout(std430,binding = 3) buffer ep{emitter_prototype prototypes[];}; //
layout(std430,binding = 4) buffer e{emitter emitters[];};//
layout(std430,binding = 6) buffer de{uint dead[];};//
// layout(std430,binding = 7) buffer ed{_emission emitted[];};
layout(std430,binding = 7) buffer pl{uint particleLifes[];};
layout(std430,binding = 8) buffer ei{emitterInit emittersInits[];};

const uint liveParticles = 0;
const uint burstCounter = 1;
const uint emittedCounter = 2;

uniform uint count;
uniform uint burstOffset;
uniform float deltaTime;
uniform float time;
uniform int max_particles;
uniform uint stage;
uniform vec3 floatingOrigin;


// void setParticleLive(uint x){
//     atomicOr(particleLifes[x / 32], 1 << (x % 32));
// }

void initEmitters(uint id){
    emitterInit ei = emittersInits[id];
    emitter e = emitters[ei.id];
    if(e.frame > 0 && e.last != -1){
        particles[e.last].next = -1;
        // particles[e.last].position2 = transforms[e.transform].position;
        // set(particles[e.last].velocity2,vec3(0));
    }
    e.emitter_prototype = ei.emitterProtoID;
    e.transform = ei.transformID;
    e.live = ei.live;
    e.frame = 0;
    e.emission = 1;//prototypes[e.emitter_prototype].emission_rate * deltaTime;
    e.last = -1;
    emitters[ei.id] = e;
}

void makeParticle(inout particle p, inout emitter_prototype ep, inout rng generator, inout float particle_count, vec3 tpos, vec4 trot, vec3 tscale, uint epId, float dt, uint eId){

    p.position = tpos + normalize(randVec3(generator)) * tscale * ep.radius;
    // p.rotation  = transforms[e.transform].rotation;
    p.scale = tscale.xy * ep.scale;
    p.life = 1.f;
    p.l = max(ep.lifetime2 + gen(generator) * abs(ep.lifetime - ep.lifetime2),0.0001f);
    // p.emitter = eId;
    p.emitter_prototype = epId;
    vec3 random = rotate(vec3(1,0,0),gen(generator) * ep.dispersion,vec3(0,0,ep.minSpeed + gen(generator) * (ep.maxSpeed - ep.minSpeed)));
    random = rotate(vec3(0,0,1),gen(generator) * 2 * M_PI,random);
    vec3 vel = vec3(rotate(identity(), trot) * vec4(random * tscale,1));
    set(p.velocity,vel);
    
    if(ep.velAlign == 1){
        vec3 dir = cross(vel,randVec3(generator));
        set(p.rotation,lookAt(dir,vel));
    }else{
        set(p.rotation,normalize(randVec4(generator)));
    }

    p.position += vel * dt * particle_count;
    // p.position2 = p.position;
    // p.velocity2 = p.velocity;
    p.life -= dt * particle_count++ / p.l;
}

void emit(uint thread_id){
    // live[0] = 1;
    
    emitter e = emitters[thread_id];
    if(e.live == 1){

        emitter_prototype ep = prototypes[e.emitter_prototype];
        e.emission += ep.emission_rate * deltaTime;
        e.frame++;
        int emission = int(e.emission);
        
        int new_particles_start = atomicAdd(atomicCounters[liveParticles],emission);
        int end = new_particles_start + emission;
        new_particles_start = min(new_particles_start,max_particles);
        end = min(end,max_particles);
        float dt = deltaTime;
        dt /= float(emission + 1);
        float particle_count = 0.0;
        vec2 id = vec2(thread_id % max_particles, thread_id / max_particles);
        rng generator;
        setSeed(generator,id,time);
        for(int i = new_particles_start; i < end && i < max_particles; ++i){
            // emitted[i].position = transforms[e.transform].position;
            // emitted[i].emitterID = int(thread_id);
            // emitted[i].emitter_prototype = e.emitter_prototype;
            // emitted[i].scale = transforms[e.transform].scale;
            // emitted[i].last = e.last;


            // initParticle()

            int x = int(dead[i]);
            particle p;
            makeParticle(p,ep,generator,particle_count, transforms[e.transform].position,transforms[e.transform].rotation,transforms[e.transform].scale, e.emitter_prototype, dt, thread_id);

            if(ep.trail == 1){
                if(e.frame > 0 && e.last != -1){
                    particles[e.last].next = int(x);
                    // particles[e.last].position2 = p.position;
                    // particles[e.last].velocity2 = p.velocity;
                    // particles[e.last].life2 = p.life;
                }
                p.next = -int(thread_id) - 2;
                // p.prev = e.last;
                e.last = int(x);
            }

            // p.live = 1;
            particles[x] = p;
            particleLifes[x] = 1;
            // setParticleLive(x);

        }
        e.emission -= float(uint(e.emission));
    }else{
        e.frame = 0;
        e.last = -1;
    }
    emitters[thread_id] = e;

}

layout( local_size_x = 128,  local_size_y = 1, local_size_z = 1) in;
void main () {
    uint gid = gl_GlobalInvocationID.x;
    if(gid < count){
        switch(stage){
            case 0:
                initEmitters(gid);
                break;
            case 1:
                emit(gid);
                break;
        }
    }
}