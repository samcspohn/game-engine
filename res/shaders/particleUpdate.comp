#version 430 core

#extension GL_ARB_compute_shader : enable
#extension GL_ARB_shader_storage_buffer_object : enable
#include "util.glsl"
#include "particle.glsl"
#include "transform.glsl"


struct _emission{
    vec3 position;
    uint emitter_prototype;
    vec3 direction;
    int emitterID;
    vec3 scale;
    int last;
};

struct _burst{
    vec3 position;
    uint emitter_prototype;
    vec3 direction;
    uint count;
    vec3 scale;
    int p1;
};

layout(std430,binding = 0) buffer t{_transform transforms[];};
layout(std430,binding = 1) buffer ac{int atomicCounters[];};
layout(std430,binding = 2) buffer p{particle particles[];};
layout(std430,binding = 3) buffer ep{emitter_prototype prototypes[];};
layout(std430,binding = 4) buffer e{emitter emitters[];};
// layout(std430,binding = 5) buffer r{uint rng[];};
layout(std430,binding = 5) buffer bp{uint burstParticles[];};
layout(std430,binding = 6) buffer de{uint dead[];};
layout(std430,binding = 7) buffer ed{_emission emitted[];};
layout(std430,binding = 8) buffer ei{emitterInit emittersInits[];};
layout(std430,binding = 9) buffer pb{_burst particleBursts[];};

const uint liveParticles = 0;
const uint burstCounter = 1;
const uint emittedCounter = 2;

uniform uint count;
uniform float deltaTime;
uniform float time;
uniform int max_particles;
uniform uint stage;
uniform vec3 cameraPosition;
uniform vec3 cameraForward;
uniform vec3 cameraUp;
uniform vec3 floatingOrigin;
shared uint garbage[130];

void update(uint id, float dt){

     if(particles[id].live == 1){
        particle p = particles[id];
        emitter_prototype proto = prototypes[p.emitter_prototype];
        p.position += p.velocity * dt;

        if(p.next < -1 && emitters[-p.next - 2].last == id){
            p.position2 = transforms[emitters[-p.next - 2].transform].position;
        }else{
            p.position2 += p.velocity2 * dt;
            // p.position2 = particles[p.next].position;
        }

        // p.position -= floatingOrigin;
        p.life -= dt / p.l;
        p.life2 -= dt / p.l;

        if(p.life < 0)
        {
            int index = atomicAdd(atomicCounters[liveParticles],-1);
            dead[index - 1] = id;
            // uint index = atomicAdd(garbage[0],1);
            // garbage[index + 2] = id;
            p.live = 0;
            p.next = p.prev = -1;
        }
        particles[id] = p;
    }
}

void initEmitters(uint id){
    emitterInit ei = emittersInits[id];
    emitter e;
    e.emitter_prototype = ei.emitterProtoID;
    e.transform = ei.transformID;
    e.live = ei.live;
    e.frame = 0;
    e.emission = 1;//prototypes[e.emitter_prototype].emission_rate * deltaTime;
    e.last = -1;
    emitters[ei.id] = e;
}

void makeParticle(inout particle p, inout emitter_prototype ep, inout rng generator, inout float particle_count, vec3 tpos, vec4 trot, vec3 tscale, uint epId, float dt, uint eId){

    p.position = tpos + normalize(randVec3(generator)) * tscale * ep.radius;
    // p.rotation  = transforms[e.transform].rotation;
    p.scale = tscale * ep.scale;
    p.life = 1.f;
    p.l = ep.lifetime2 + generator.gen() * (ep.lifetime - ep.lifetime2);
    p.emitter = eId;
    p.emitter_prototype = epId;
    vec3 random = rotate(vec3(1,0,0),generator.gen() * ep.dispersion,vec3(0,0,ep.minSpeed + generator.gen() * (ep.maxSpeed - ep.minSpeed)));
    random = rotate(vec3(0,0,1),generator.gen() * 2 * M_PI,random);
    p.velocity = vec3(rotate(identity(), trot) * vec4(random * tscale,1));
    
    if(ep.velAlign == 1){
        vec3 dir = cross(p.velocity,randVec3(generator));
        p.rotation = lookAt(dir,p.velocity);
    }else{
        p.rotation = normalize(randVec4(generator));
    }

    p.position += p.velocity * dt * particle_count;
    p.life -= dt * particle_count++ / p.l;
}

void emit(uint thread_id){
    // live[0] = 1;
    
    emitter e = emitters[thread_id];
    if(e.live == 1){

        emitter_prototype ep = prototypes[e.emitter_prototype];
        e.emission += ep.emission_rate * deltaTime;
        e.frame++;
        int emission = int(e.emission);
        
        int new_particles_start = atomicAdd(atomicCounters[liveParticles],emission);
        int end = new_particles_start + emission;
        float dt = deltaTime;
        dt /= float(emission + 1);
        float particle_count = 0.0;
        vec2 id = vec2(thread_id % max_particles, thread_id / max_particles);
        rng generator;
        generator.setSeed(id,time);
        for(int i = new_particles_start; i < end && i < max_particles; ++i){
            // emitted[i].position = transforms[e.transform].position;
            // emitted[i].emitterID = int(thread_id);
            // emitted[i].emitter_prototype = e.emitter_prototype;
            // emitted[i].scale = transforms[e.transform].scale;
            // emitted[i].last = e.last;


            // initParticle()

            int x = int(dead[i]);
            particle p;
            makeParticle(p,ep,generator,particle_count, transforms[e.transform].position,transforms[e.transform].rotation,transforms[e.transform].scale, e.emitter_prototype, dt, thread_id);
            // p.position = transforms[e.transform].position;

            // // p.rotation  = transforms[e.transform].rotation;
            // p.scale = transforms[e.transform].scale * ep.scale;
            // p.life = 1.f;
            // p.l = ep.lifetime2 + generator.gen() * (ep.lifetime - ep.lifetime2);
            // p.emitter = thread_id;
            // p.emitter_prototype = e.emitter_prototype;
            // vec3 random = rotate(vec3(1,0,0),generator.gen() * ep.dispersion,vec3(0,0,ep.minSpeed + generator.gen() * (ep.maxSpeed - ep.minSpeed)));
            // random = rotate(vec3(0,0,1),generator.gen() * 2 * M_PI,random);
            // p.velocity = vec3(rotate(identity(),transforms[e.transform].rotation) * vec4(random * transforms[e.transform].scale,1));
            
            // p.rotation = normalize(randVec4(generator));

            // p.position += p.velocity * dt * count;
            // p.life -= dt * count++ / p.l;
            // set trail
            if(ep.trail == 1){
                if(e.frame > 0){
                    particles[e.last].next = int(x);
                    particles[e.last].position2 = p.position;
                    particles[e.last].velocity2 = p.velocity;
                    particles[e.last].life2 = p.life;
                }
                p.next = -int(thread_id) - 2;
                p.prev = e.last;
                e.last = int(x);
            }

            p.live = 1;
            particles[x] = p;
        }
        e.emission -= float(uint(e.emission));
    }else{
        e.frame = 0;
        e.last = -1;
    }
    emitters[thread_id] = e;

}

void burst(uint thread_id){
    _burst e = particleBursts[thread_id];

    emitter_prototype ep = prototypes[e.emitter_prototype];
    
    int new_particles_start = atomicAdd(atomicCounters[liveParticles],int(e.count));
    int end = new_particles_start + int(e.count);
    float dt = deltaTime;
    dt /= float(e.count + 1);
    float particle_count = 0.0;
    vec2 id = vec2(thread_id % max_particles, thread_id / max_particles);
    rng generator;
    generator.setSeed(id,time);
    for(int i = new_particles_start; i < end && i < max_particles; ++i){
        int x = int(dead[i]);
        particle p;

        makeParticle(p,ep,generator,particle_count, e.position,lookAt(e.direction,vec3(0,1,0.000000001)),e.scale, e.emitter_prototype, dt, -1);
        // p.position = e.position;
        // p.rotation = normalize(randVec4(generator));
        // // p.rotation  = transforms[e.transform].rotation;
        // p.scale = e.scale * ep.scale;
        // p.life = 1.f;
        // p.l = ep.lifetime2 + generator.gen() * (ep.lifetime - ep.lifetime2);
        // p.emitter = -1;
        // p.emitter_prototype = e.emitter_prototype;
        // vec3 random = rotate(vec3(1,0,0),generator.gen() * ep.dispersion,vec3(0,0,ep.minSpeed + generator.gen() * (ep.maxSpeed - ep.minSpeed)));
        // random = rotate(vec3(0,0,1),generator.gen() * 2 * M_PI,random);
        // p.velocity = vec3(rotate(identity(),lookAt(e.direction,vec3(0,1,0.000000001))) * vec4(e.scale * random,1));
        
        // p.position += p.velocity * dt * count;
        // p.life -= dt * count++ / p.l;
        
        p.live = 1;
        particles[x] = p;
    }
}

layout( local_size_x = 128,  local_size_y = 1, local_size_z = 1) in;
void main () {
    uint gid = gl_GlobalInvocationID.x;
    if(stage == 2 && gid < count)
        initEmitters(gid);
    if(stage == 0 && gid < count) // only emitters
        emit(gid);
    if(stage == 3 && gid  < count){
        burst(gid);
    }
    if(stage == 1 && gid < count){ //update particles
        float dt = deltaTime;
        update(gid, dt);
    }
}