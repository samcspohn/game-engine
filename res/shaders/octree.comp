#version 430 core

#extension GL_ARB_compute_shader : enable
#extension GL_ARB_shader_storage_buffer_object : enable

struct octant{
	vec3 c;
	vec3 _min;
	vec3 _max;
	float depth;
};

struct v{
	vec3 pos;
//	vec3 col;
};

uniform float maxDepth;
uniform vec3 camPos;
layout(std430,binding = 0) buffer o{
	octant octants[];
};

layout(std430,binding = 1) buffer _v{
	v verts[];
};

vec3 getCol(float d){
	float r,g,b;
	if(d < .2){//1
		r = 1;
		g = d / .2;
		b = 0;
	}else if(d >= .2 && d < .4){//2
		r = 1 - (d - .2) / .2;
		g = 1;
		b = 0;
	}else if(d >= .4 && d < .6){//3
		r = 0;
		g = 1;
		b = (d - .4) / .2;
	}else if(d >= .6 && d < .8){//4
		r = 0;
		g = 1 - (d - .6) / .2;
		b = 1;
	}else if(d >= .8){//5
		r = (d - .8) / .2;
		g = 0;
		b = 0;
	}
	return vec3(r,g,b);
}

layout( local_size_x = 64,  local_size_y = 1, local_size_z = 1) in;
void main () {
	uint gid = gl_GlobalInvocationID.x;
	octant o = octants[gid];
	uint vid = gid * 18;
	float scale = 10;//length(o.c - camPos) * .1;

	//y
	verts[vid].pos = vec3(o.c.x + scale,o._max.y,o.c.z);
	verts[vid + 1].pos = vec3(o.c.x - scale,o._max.y,o.c.z);
	verts[vid + 2].pos = vec3(o.c.x + scale,o._min.y,o.c.z);
	verts[vid + 3].pos = verts[vid + 1].pos;
	verts[vid + 4].pos = verts[vid + 2].pos;
	verts[vid + 5].pos = vec3(o.c.x - scale,o._min.y,o.c.z);
				  
	//x			  
	verts[vid + 6].pos = vec3(o._min.x,o.c.y + scale,o.c.z);
	verts[vid + 7].pos = vec3(o._min.x,o.c.y - scale,o.c.z);
	verts[vid + 8].pos = vec3(o._max.x,o.c.y + scale,o.c.z);
	verts[vid + 9].pos = verts[vid + 7].pos;
	verts[vid + 10].pos = verts[vid + 8].pos;
	verts[vid + 11].pos = vec3(o._max.x,o.c.y - scale,o.c.z);

	//z
	verts[vid + 12].pos = vec3(o.c.x,o.c.y + scale,o._max.z);
	verts[vid + 13].pos = vec3(o.c.x,o.c.y - scale,o._max.z);
	verts[vid + 14].pos = vec3(o.c.x,o.c.y + scale,o._min.z);
	verts[vid + 15].pos = verts[vid + 13].pos;
	verts[vid + 16].pos = verts[vid + 14].pos;
	verts[vid + 17].pos = vec3(o.c.x,o.c.y - scale,o._min.z);

//	vec3 col = getCol(o.depth / maxDepth);
//	for(uint i = vid; i < vid + 18; i++){
//		verts[i].col = col;
//	}
}