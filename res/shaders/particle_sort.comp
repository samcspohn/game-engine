#version 430 core
#include "util.glsl"
#include "transform.glsl"
#include "particle.glsl"



const uint WG_SIZE = 128;
const uint N_GROUPS = 256;
const uint RADIX = 12;
const uint BUCK = 1 << RADIX;
// const uint block_sum_size = uint(sqrt(N_GROUPS * BUCK));
const uint block_sum_size = 256;


// layout(std430,binding = 0) buffer t{_transform transforms[];};
// layout(std430,binding = 13) buffer rp{uint renderParticles[];};
layout(std430,binding = 1) buffer d_in{d _input[];};
layout(std430,binding = 2) buffer d_out{d _output[];};
layout(std430,binding = 11) buffer ki{uint keys_in[];};
layout(std430,binding = 12) buffer ko{uint keys_out[];};
layout(std430,binding = 3) buffer blk_sum{uint block_sums[];};
layout(std430,binding = 4) buffer p{particle particles[];};
layout(std430,binding = 5) buffer a{uint atomics[];};
layout(std430,binding = 6) buffer d_s{uint scan[];};
layout(std430,binding = 7) buffer d_h{uint histo[];};
layout(std430,binding = 9) buffer ep{emitter_prototype prototypes[];};
layout(std430,binding = 10) buffer e{emitter emitters[];};
layout(std430,binding = 0) buffer lp{uint livingParticles[];};

uniform int stage;
uniform mat4 vp;
uniform mat4 view;
uniform mat3 camInv;
uniform vec3 camp;
uniform uint count;
uniform float x_size;
uniform float y_size;
// uniform mat4 frustum;
uniform uint numElements;
uniform uint breadth;
//////////////////////////////////////////////////




// shared uint local_histo[BUCK];
// shared uint local_scan[BUCK*N_GROUPS];

uniform uint nkeys;
uniform uint pass;
uniform uint wg_size;
uniform uint offset;

uniform vec3 camPos;
uniform vec3 cameraForward;
uniform vec3 cameraUp;

shared uint _keys[4096];
shared uint buckets[2048]; // 12 bits
shared uint ids[4096];
shared uint local_sums[128];

void subSort(uint g_id){
    
    // 4096 / 128 = 32
    uint l_id = gl_LocalInvocationID.x;
    uint w_id = gl_WorkGroupID.x;
    uint start = l_id * 32;
    uint end = start + 32;

    uint buckStart = l_id * 16;
    uint buckEnd = buckStart + 16;

    uint globalOffset = 4096 * w_id;
    for(uint i = buckStart; i < buckEnd; ++i){
        buckets[i] = 0;
    }

barrier();
    if(end + globalOffset > nkeys){
        end = nkeys - globalOffset;
    }
    for(uint i = start; i < end; ++i){
        // uint k = key(_output[globalOffset + i]);
        uint k = keys_out[globalOffset + i];
        k >>= 5;
        _keys[i] = k;
        ids[i] = globalOffset + i;
        atomicAdd(buckets[k],1);
    }
barrier();

    uint temp = buckets[buckStart];
    buckets[buckStart] = 0;
    for(uint i = buckStart + 1; i < buckEnd; i++){
        uint temp2 = buckets[i];
        buckets[i] = temp;
        temp += temp2;
    }
    local_sums[l_id] = temp;
barrier();
    if(l_id == 0){
        uint temp = globalOffset +  local_sums[0];
        local_sums[0] = globalOffset;
        for(uint i = 1; i < 128; i++){
            uint temp2 = local_sums[i];
            local_sums[i] = temp;
            temp += temp2;
        }
    }
barrier();
    for(uint i = buckStart; i < buckEnd; ++i){
        // uint group_id = gl_WorkGroupID.x;
        buckets[i] += local_sums[l_id];
    }
barrier();

    for(uint i = start; i < end; ++i){
        uint index = atomicAdd(buckets[_keys[i]],1);
        _input[index] = _output[ids[i]];
        keys_in[index] = keys_out[ids[i]];

    }
}


void radix(uint g_id){
    uint index;
    // first pass
    if(stage == 0){
        subSort(g_id);
    }

    if(stage == 1){
        uint start = g_id * block_sum_size;
        uint end = start + block_sum_size;
        
        uint temp = histo[start];
        histo[start] = 0;
        for(uint i = start + 1; i < end; i++){
            uint temp2 = histo[i];
            histo[i] = temp;
            temp += temp2;
        }
        block_sums[g_id] = temp;
    }

    if(stage == 2){
        uint temp = block_sums[0];
        block_sums[0] = 0;
        for(uint i = 1; i < block_sum_size; i++){
            uint temp2 = block_sums[i];
            block_sums[i] = temp;
            temp += temp2;
        }
    }

    if(stage == 3){
        // uint group_id = gl_WorkGroupID.x;
        histo[g_id] += block_sums[g_id/block_sum_size];
    }
    else if(stage == 4){
        d item = _input[g_id]; 
        // index = key(item);
        index = keys_in[g_id]; 
        _output[atomicAdd(histo[index],1)] = item;
        // uint off = count / 128;
        // _output[(gl_LocalInvocationID.x * off + gl_WorkGroupID.x) % count] = item;
    }

    // // second pass
    // else if(stage == 3){
    //     index = data2[gid].key >> 16;
    //     atomicAdd(counts[index],1);
    // }
    // else if(gid == 0 && stage == 4){
    //     offsets[0] = 0;
    //     for(int i = 1; i < 65536; i++){
    //         offsets[i] = offsets[i - 1] + counts[i - 1];
    //     }
    // }else if(stage == 5){
    //     index = data2[gid].key >> 16;
    //     data1[atomics[0] - atomicAdd(offsets[index],1)] = data2[gid];
    // }
}

uint convertFloatToClamped(float f){
    return uint(f * 32768 + 32768);
}
uint getAngle(vec3 a, vec3 b,vec2 quadrant){
    float angle = acos(dot(normalize(a),normalize(b)));
    if(quadrant.x > 0){
        angle = 6.28318530718 - angle;
    }
    return uint((angle / 6.28318530718) * 65536);
}
void rotateX(inout vec3 vec, float angle){
    float y = vec.y;
    float z = vec.z;
    vec.y = y * cos(angle) - z * sin(angle);
    vec.z = y * sin(angle) + z * cos(angle);
}

void genPosition1(inout d item, vec3 a){
    vec3 newVec = vec3(a.x,a.y,-a.z);
    uint xAxisAngle = getAngle(newVec,vec3(a.x,0,-a.z),vec2(a.y,a.z));
    // rotateX(newVec,-xAxisAngle);
    setX(item, xAxisAngle);
    uint yAxisAngle = getAngle(vec3(a.x,0, -a.z), vec3(0,0, 1),vec2(a.x,a.z));
    setY(item, yAxisAngle);
    setZ(item, -length(a));
}

// void makeRenderParticle(uint index){

//     uint id = renderParticles[index];
//     particle p = particles[id];
//     emitter_prototype proto = prototypes[p.emitter_prototype];
//     vec3 p1 = (vp * vec4(p.position,1)).xyz;
//     vec3 p2 = (vp * vec4(p.position2,1)).xyz;
//     d item;
//     uint _key =  (~floatBitsToUint(p1.z) << 1) >> 16;
//     // key(item, _key);
//     keys_out[index] = _key;
//     // emitterID(item, p.emitter);
//     life(item, p.life);
//     protoID(item, p.emitter_prototype);
//     vec3 p11;
//     vec3 p21;
//     vec4 rot;
//     vec2 _scale;
//     if(prototypes[p.emitter_prototype].trail == 1){
//         p11 = p.position;
//         p21 = p.position2;
//         p11 = p11 + (p21 - p11) / 2;
//         _scale = vec2(p.scale.x, length(p.position - p.position2));
//     }else{
//         _scale = p.scale.xy;
//         p11 = p.position;
//     }
//     rot = p.rotation;
//     if(proto.billboard == 1)
//         rot = lookAt(-cameraForward, (cameraForward == vec3(0,0,1) || cameraForward == vec3(0,0,-1)) ? vec3(1,0,0) : cameraUp) * proto.billboard;
//     if(proto.trail == 1){
//         // p.rotation = lookAt(-cameraForward, (cameraForward == vec3(0,0,1) || cameraForward == vec3(0,0,-1)) ? vec3(1,0,0) : cameraUp);
//         vec3 y = p.position2 - p.position;
//         vec3 x = cross(y, p.position2 - camPos);
//         vec3 l = cross(x,y);
//         rot = lookAt(l,y);
//     }
//     p11 -= camPos;
//     setScale(item,_scale);
//     genPosition1(item, p11);
//     setRotation(item, rot);
//     // genPosition2(item, p21);

//     // item.id = gid;
//     atomicAdd(histo[_key],1);
//     // _input[index] = item;
//     _output[index] = item;
// }

layout( local_size_x = 128,  local_size_y = 1, local_size_z = 1) in;
void main () {
    uint gid = gl_GlobalInvocationID.x;
    uint index;
    if(gid < count){
        switch(stage){
            case -2:
                histo[gid] = 0;
                break;
            case -1:
                {
                    particle p = particles[livingParticles[gid]];
                    emitter_prototype proto = prototypes[p.emitter_prototype];
                    vec3 p1 = camInv * (p.position - camp);
                    vec3 p2 = camInv * (p.position2 - camp);
                    vec3 p3 = (p1 + p2) / 2;
                    float radius = length(p2 - p3) / 2 + 
                    prototypes[p.emitter_prototype].sizeLife[int((1.f - min(max(p.life,0.01f),1.f)) * 100.f)] * length(p.scale.xy);
                    if(p.live == 1 && p3.z - radius < 0.f
                    && (abs(p3.x) - radius) / abs(p3.z) < x_size
                    && (abs(p3.y) - radius) / abs(p3.z) < y_size){
                        // && (abs(p3.x) - radius) / abs(p3.z) < 1.f && (abs(p3.y) - radius) / abs(p3.z) < 1.f){
                        index = atomicAdd(atomics[0],1);
                        // renderParticles[index] = gid;
                        d item;
                        uint _key =  (~floatBitsToUint(p1.z) << 1) >> 16;
                        // key(item, _key);
                        keys_out[index] = _key;
                        // emitterID(item, p.emitter);
                        life(item, p.life);
                        protoID(item, p.emitter_prototype);
                        vec3 p11;
                        vec3 p21;
                        vec4 rot;
                        vec2 _scale;
                        rot = p.rotation;
                        if(prototypes[p.emitter_prototype].trail == 1){
                            p11 = p.position;
                            p21 = p.position2;
                            p11 = p11 + (p21 - p11) / 2;
                            _scale = vec2(p.scale.x, length(p.position - p.position2));
                        }else{
                            _scale = p.scale.xy;
                            p11 = p.position;
                        }
                        if(proto.billboard == 1)
                            rot = lookAt(-cameraForward, (cameraForward == vec3(0,0,1) || cameraForward == vec3(0,0,-1)) ? vec3(1,0,0) : cameraUp) * proto.billboard;
                        if(proto.trail == 1){
                            // p.rotation = lookAt(-cameraForward, (cameraForward == vec3(0,0,1) || cameraForward == vec3(0,0,-1)) ? vec3(1,0,0) : cameraUp);
                            vec3 y = p.position2 - p.position;
                            vec3 x = cross(y, p.position2 - camPos);
                            vec3 l = cross(x,y);
                            rot = lookAt(l,y);
                        }
                        p11 -= camPos;
                        setScale(item,_scale);
                        genPosition1(item, p11);
                        setRotation(item, rot);
                        // genPosition2(item, p21);

                        // item.id = gid;
                        atomicAdd(histo[_key],1);
                        // _input[index] = item;
                        _output[index] = item;
                        // _input[index].id = gid;
                    }
                }
                break;
            // case -3:
            //     makeRenderParticle(gid);
            //     break;
            default:
                radix(gid);
                break;
        }
    }
}